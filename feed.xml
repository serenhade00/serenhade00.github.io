<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://serenhade00.github.io/</id><title>이곳, 세렌하데.</title><subtitle>SerenH's Blog since 22.03 / Finding Serenditpiy </subtitle> <updated>2022-07-17T22:48:44+09:00</updated> <author> <name>Seonghwan_Shin</name> <uri>https://serenhade00.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://serenhade00.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://serenhade00.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Seonghwan_Shin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Chapter 3. Dynamic Programming</title><link href="https://serenhade00.github.io/posts/3rd-DP/" rel="alternate" type="text/html" title="Chapter 3. Dynamic Programming" /><published>2022-07-05T19:46:00+09:00</published> <updated>2022-07-17T22:48:16+09:00</updated> <id>https://serenhade00.github.io/posts/3rd-DP/</id> <content src="https://serenhade00.github.io/posts/3rd-DP/" /> <author> <name>Seonghwan_Shin</name> </author> <summary> 📰 다이나믹 프로그래밍(Dynamic Programming) 알고리즘이란? 📰 Dynamic?? 알고리즘이 역동적…? Dynamic Programming. 줄여서 DP라고 부르는 이 알고리즘은 정말 정말 다양한 유형의 문제가 있다. 딱히 뭔가 역동적(Dynamic)하거나 어떤 새로운 Programming의 방식을 가져서 이름 붙여진 것은 아니다. 이에 관한 내용은 ↓, TMI 로. 다이나믹 프로그래밍(DP): 정의: 동적 계획법이라고도 불리며, 여러 개의 하위 문제를 풀어나가며(저장 o), 그 결과를 이용해 최종 답을 도출하는 알고리즘. 이렇게 보면 Chapter 1. 분할 정복과 어찌보면 비슷한 면이 있다. 하지만 DP만의 특징을 좀 더 살... </summary> </entry> <entry><title>Chapter 2. Greedy</title><link href="https://serenhade00.github.io/posts/2nd-Greedy/" rel="alternate" type="text/html" title="Chapter 2. Greedy" /><published>2022-07-05T16:00:00+09:00</published> <updated>2022-07-06T21:40:54+09:00</updated> <id>https://serenhade00.github.io/posts/2nd-Greedy/</id> <content src="https://serenhade00.github.io/posts/2nd-Greedy/" /> <author> <name>Seonghwan_Shin</name> </author> <summary> 😋 그리디(Greedy) 알고리즘이란? 😋 Greedy..? 탐욕적..? 뭔가 욕심을 부리는 알고리즘인가.. 그렇다. 극한의 이득을 취해가며 문제를 풀어나가는 방식의 알고리즘이다. 그래서 Greedy라고 불린다. 하지만, 모든 알고리즘들이 그렇듯 특정 상황에만 적용 가능하다. 그리디(Greedy): 정의: 현 상태에서, 가장 최적인 답을 근시안적으로 택하는 알고리즘. 여기서 말하는 가장 최적인 답의 예시를 들어보자. ex) 루트 노드에서 출발하여 가장 큰 수를 구하기 여기서 우리는 직관적으로 20이 정답인걸 알 수 있다. 그러나 Greedy한 접근방법에 의하면, 첫번째 선택 과정에서 7과 8을 접해(현재 선택지들)이 중 가장... </summary> </entry> <entry><title>Chapter 1. Divide &amp; Conquer</title><link href="https://serenhade00.github.io/posts/1st-Divide-and-Conquer/" rel="alternate" type="text/html" title="Chapter 1. Divide &amp; Conquer" /><published>2022-03-21T15:50:00+09:00</published> <updated>2022-03-23T22:45:06+09:00</updated> <id>https://serenhade00.github.io/posts/1st-Divide-and-Conquer/</id> <content src="https://serenhade00.github.io/posts/1st-Divide-and-Conquer/" /> <author> <name>Seonghwan_Shin</name> </author> <summary> 분할 정복 알고리즘(Divide and Conquer)이란? ???: 그냥 말 그대로 문제를 분할해서 정복하는거 아닌가? 맞다. 이게 맞는다고? 사실 알고리즘의 이름만을 보고 뭔지 대충 감이 잡히는게 있고 그렇지 않은 것도 있다. 분할 정복의 경우는 아마 대부분 전자에 속할 듯 싶다. 분할 정복(Divide and Conquer) : 정의: 어렵고 복잡한 문제를 비교적 쉬운 간단한 문제들로 쪼개서(Divide) 그 문제들을 각개 정복(Conquer) 해나가는 것. 구조: 분할(Divide): 문제를 더 이상 분할할 수 없을때까지 동일한 유형의 부분문제(subpr... </summary> </entry> <entry><title>Introduction To Computer Algorithm</title><link href="https://serenhade00.github.io/posts/Introduction/" rel="alternate" type="text/html" title="Introduction To Computer Algorithm" /><published>2022-03-17T14:30:00+09:00</published> <updated>2022-03-17T20:49:54+09:00</updated> <id>https://serenhade00.github.io/posts/Introduction/</id> <content src="https://serenhade00.github.io/posts/Introduction/" /> <author> <name>Seonghwan_Shin</name> </author> <summary> 알고리즘(Algorithm)이란? 일반적 정의 : 단순히 어떤 문제를 해결하기 위한 방법 또는 이론 프로그래밍적 정의 : 어떠한 입력이 주어졌을때 그것을 기반으로 원하는 결과(출력)를 얻어내기 위한 정형화된 단계 절차 ↑ 알고리즘 종류 레이더 차트 ↑ 시간/공간복잡도(Time/Space Complexity)란? 알고리즘의 효율성: 시간 복잡도 (Time Complexity) 시간 복잡도는 말 그대로 자료 또는 입력의 수(n)이 주어졌을 때 프로그램이 결과를 도출하는데 걸리는 연산의 수, 즉 소요 시간(f(n))을 말한다. 이를 Big-O 표기법으로 주로 나타낸다. 물론 Big-Omega나 B... </summary> </entry> </feed>
